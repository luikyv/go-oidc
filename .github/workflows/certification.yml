name: Certification
on:
    push:
      branches: [main]
    pull_request:
      branches: [main]
    workflow_dispatch:  # Allow manual triggering of this workflow

jobs:

  run-tests:
    runs-on: ubuntu-latest
    env:
      CS_VERSION: "v5.1.22"

    strategy:
      fail-fast: false
      matrix:
        # A plan has as required params the name, the config and the path to the
        # go routine that spins up the auth server.
        # If modules is not informed, all the plan's test modules will execute.
        # The variants such as response_type and client_auth_type are required
        # depending on the test plan.
        plan:
          - name: oidcc-basic-certification-test-plan
            config: ./examples/oidc/cs_config.json
            server_main: ./examples/oidc/main.go
            server_metadata: discovery
            client_registration: dynamic_client

          - name: oidcc-dynamic-certification-test-plan
            skip_modules:
              - oidcc-ensure-request-object-with-redirect-uri
              - oidcc-registration-logo-uri
              - oidcc-registration-policy-uri
              - oidcc-registration-tos-uri
              - oidcc-registration-sector-uri
              - oidcc-registration-sector-bad
              - oidcc-server-rotate-keys
              - oidcc-request-uri-unsigned
              - oidcc-request-uri-signed-rs256
            config: ./examples/oidc/cs_config.json
            server_main: ./examples/oidc/main.go
            response_type: code id_token

          - name: oidcc-dynamic-certification-test-plan
            modules:
              - oidcc-server
            config: ./examples/oidc/cs_config.json
            server_main: ./examples/oidc/main.go
            response_type: code

          - name: oidcc-dynamic-certification-test-plan
            modules:
              - oidcc-server
            config: ./examples/oidc/cs_config.json
            server_main: ./examples/oidc/main.go
            response_type: code id_token token

          - name: fapi2-message-signing-id1-test-plan
            config: ./examples/fapi2/cs_config.json
            server_main: ./examples/fapi2/main.go
            sender_constrain: dpop
            client_auth_type: private_key_jwt
            openid: openid_connect
            fapi_request_method: unsigned
            fapi_profile: plain_fapi
            fapi_response_mode: plain_response

          - name: fapi2-security-profile-id2-test-plan
            skip_modules:
              # JAR is configured as optional so the unsigned variant can execute.
              - fapi2-security-profile-id2-ensure-unsigned-request-at-par-endpoint-fails
            config: ./examples/fapi2/cs_config.json
            server_main: ./examples/fapi2/main.go
            sender_constrain: dpop
            client_auth_type: private_key_jwt
            openid: openid_connect
            fapi_profile: plain_fapi

          - name: fapi2-security-profile-id2-test-plan
            skip_modules:
              # JAR is configured as optional so the unsigned variant can execute.
              - fapi2-security-profile-id2-ensure-unsigned-request-at-par-endpoint-fails
            config: ./examples/fapi2/cs_config.json
            config_override: ./examples/fapi2/mtls_cs_config.json
            server_main: ./examples/fapi2/main.go
            sender_constrain: mtls
            client_auth_type: mtls
            openid: openid_connect
            fapi_profile: plain_fapi

    steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-go@v4
          with:
            go-version: '1.22.x'

        - name: Cache Conformance Suite repository
          uses: actions/cache@v3
          id: cache-cs
          with:
            path: ./conformance-suite
            key: cs-${{ env.CS_VERSION }}

        - name: Set up Conformance Suite
          if: steps.cache-cs.outputs.cache-hit != 'true'
          run: |
            git clone --branch "release-$CS_VERSION" --single-branch --depth=1 https://gitlab.com/openid/conformance-suite.git
            docker compose -f ./conformance-suite/builder-compose.yml run builder

        - name: Run Conformance Suite
          run: |
            docker compose up -d
            echo "Wait for the conformance suite to be ready"
            timeout 60 bash -c '
            while [ "$(curl -skf -o /dev/null -w ''%{http_code}'' https://localhost:8443/api/runner/available)" != "200" ]; do
              echo "Conformance suite not ready, sleeping for 2 seconds"
              sleep 2
            done
            echo "Conformance suite is ready"
            ' || echo "Timeout reached before the conformance suite is ready"

        - name: Start authorization server
          run: |
            # Run the server on background and save the process ID so we can kill it later
            sudo go run ${{ matrix.plan.server_main }} & echo $! > /tmp/go-server.pid

            echo "Wait for the auth server to be ready"
            timeout 10 bash -c '
            while [ "$(curl -skf -o /dev/null -w ''%{http_code}'' https://auth.localhost/.well-known/openid-configuration)" != "200" ]; do
              echo "Auth server not ready, sleeping for 2 seconds"
              sleep 2
            done
            echo "Auth server is ready"
            ' || echo "Timeout reached before the auth server is ready"

        - name: Run test plan
          run: |
            # Prepare base arguments.
            ARGS="--plan=${{ matrix.plan.name }} --config=${{ matrix.plan.config }}"
            if [ -n "${{ matrix.plan.config_override }}" ]; then
              ARGS="$ARGS --config_override=\"${{ matrix.plan.config_override }}\""
            fi

            # Specified modules are the only ones to execute.
            if [ -n "${{ matrix.plan.modules }}" ]; then
              # Convert the test modules list to comma-separated string
              MODULES=$(echo '${{ toJson(matrix.plan.modules) }}' | jq -r '.[]' | tr '\n' ',' | sed 's/,$//')
              ARGS="$ARGS --modules=$MODULES"
            fi

            # Excluded modules won't execute.
            if [ -n "${{ matrix.plan.skip_modules }}" ]; then
              # Convert the excluded test modules list to comma-separated string
              MODULES=$(echo '${{ toJson(matrix.plan.skip_modules) }}' | jq -r '.[]' | tr '\n' ',' | sed 's/,$//')
              ARGS="$ARGS --skip_modules=$MODULES"
            fi

            # Add variants
            if [ -n "${{ matrix.plan.response_type }}" ]; then
              ARGS="$ARGS --response_type=\"${{ matrix.plan.response_type }}\""
            fi
            if [ -n "${{ matrix.plan.sender_constrain }}" ]; then
              ARGS="$ARGS --sender_constrain=\"${{ matrix.plan.sender_constrain }}\""
            fi
            if [ -n "${{ matrix.plan.client_auth_type }}" ]; then
              ARGS="$ARGS --client_auth_type=\"${{ matrix.plan.client_auth_type }}\""
            fi
            if [ -n "${{ matrix.plan.openid }}" ]; then
              ARGS="$ARGS --openid=\"${{ matrix.plan.openid }}\""
            fi
            if [ -n "${{ matrix.plan.fapi_request_method }}" ]; then
              ARGS="$ARGS --fapi_request_method=\"${{ matrix.plan.fapi_request_method }}\""
            fi
            if [ -n "${{ matrix.plan.fapi_profile }}" ]; then
              ARGS="$ARGS --fapi_profile=\"${{ matrix.plan.fapi_profile }}\""
            fi
            if [ -n "${{ matrix.plan.fapi_response_mode }}" ]; then
              ARGS="$ARGS --fapi_response_mode=\"${{ matrix.plan.fapi_response_mode }}\""
            fi
            if [ -n "${{ matrix.plan.server_metadata }}" ]; then
              ARGS="$ARGS --server_metadata=\"${{ matrix.plan.server_metadata }}\""
            fi
            if [ -n "${{ matrix.plan.client_registration }}" ]; then
              ARGS="$ARGS --client_registration=\"${{ matrix.plan.client_registration }}\""
            fi

            echo "Running with arguments: $ARGS"
            # Ensure that the arguments are passed correctly with spaces preserved.
            sh -c "go run cmd/testrunner/main.go $ARGS"

        - name: Find test plan log zip file
          id: find_zip
          if: ${{ always() }}
          run: |
            # Find the first ZIP file
            FILE=$(find . -type f -name "*.zip" | head -n 1)

            # If no file is found, fail the job
            if [ -z "$FILE" ]; then
              echo "No ZIP file found!"
              exit 1
            fi

            echo "ZIP_FILE=$(basename "$FILE")" >> $GITHUB_ENV

        - name: Upload test plan Log
          uses: actions/upload-artifact@v4
          if: ${{ always() }}
          env:
            ZIP_FILE: ${{ env.ZIP_FILE }}
          with:
            path: ${{ env.ZIP_FILE }}
            name: ${{ strategy.job-index }}-${{ env.ZIP_FILE }}

        - name: Cleanup
          if: always()
          run: |
            docker compose down
            kill $(cat /tmp/go-server.pid)

  all-tests-succeeded:
    runs-on: ubuntu-latest
    needs: run-tests
    if: success()
    steps:
      - name: Test plans passed
        run: echo "All test plans passed successfully!"
